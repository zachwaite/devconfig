call plug#begin('~/.vim/plugged')                                                       
  Plug 'sukima/xmledit', {'branch': 'master'}                                           
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  " coc-json coc-tsserver coc-prettier coc-sh coc-pyright coc-rust-analyzer
  Plug 'sheerun/vim-polyglot'
  Plug 'whatyouhide/vim-gotham'
  Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
  " Plug 'tpope/vim-surround'
  Plug 'andlrc/rpgle.vim', {'branch': 'master'}
call plug#end()                                                                         

" ============================ begin coc ====================================
" allow coc.nvim to find the right node
let g:coc_node_path = '/home/zach/.nvm/versions/node/v19.0.0/bin/node'
                                                                                        
" coc settings
" snippet expansion settings
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ CheckBackSpace() ? "\<TAB>" :
      \ coc#refresh()

function! CheckBackSpace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" show info on hover
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" navigate errors
try
    nmap <silent> <Leader>n :call CocAction('diagnosticNext')<cr>
    nmap <silent> <Leader>b :call CocAction('diagnosticPrevious')<cr>
endtry
" ============================ end coc ====================================

" ======================= begin generic vim ===============================
"
filetype plugin on
syntax on

"
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//

" use mouse wheel to scroll popup
set mouse=a

inoremap jk <ESC>

" generic vim settings
set colorcolumn=88                                                                      
set hlsearch                                                                            
set termguicolors
set nowrap                                                                              
set nu                                                                                  
set tabstop=2                                                                           
set softtabstop=2                                                                       
set shiftwidth=2                                                                        
set textwidth=0                                                                         
set expandtab                                                                           
set autoindent                                                                          
set fileformat=unix
silent! colorscheme gotham256

" secondary yank/paste buffer
nmap zy "zy
vmap zy "zy
nmap zp "zp
vmap zp "zp

" Copy selection into regular buffer (paste with `p` as normal)
func! GetSelectedText()
  normal gv"xy
  let result = getreg("x")
  normal gv
  return result
endfunc

vnoremap <F6> :call GetSelectedText()

func! MakeMarkdownLink()
  normal gv"zd
  let raw = getreg("z")
  let @z = substitute(tolower(raw), " ", "-", "g")
  normal h"zp
endfunc

vnoremap <F7> :call MakeMarkdownLink()


" abbreviations for date / time in insert mode
iab <expr> ddate strftime("%Y-%m-%d")
iab <expr> ttime strftime("%H:%M")
iab <expr> ptime strftime("%l:%M %p")

" ======================= end generic vim ================================

" ===================== begin python specific  ===========================
" I like to automatically organize python imports on save, but it is not
" supported in coc.nvim [https://github.com/neoclide/coc.nvim/issues/888](https://github.com/neoclide/coc.nvim/issues/888)
" for good reason. Therefore this autocmd to call python.sortImports is the
" proper solution.

autocmd BufWritePre *.py silent! :call CocAction('runCommand', 'python.sortImports')
" ====================== end python specific  ===========================


" ==================== Cheatsheet =================================
" SHIFT + K -> show info of object under the cursor
" <Leader> is \
"
" to format an xml file
" :%! xmllint --format %
"
" Use :CocLocalConfig to create a .vim/coc-settings.json in the local
" project dir. CocLocalConfig will place the .vim in the root of the git
" repo you're working in - in the same directory as .git
" Sample CocLocalConfig
" {
"   'python.formatting.provider': 'black',
"   'pyright.organizeimports.provider': 'isort',
"   'python.sortImports.args': ['--profile', 'black'],
"   'coc.preferences.formatOnSaveFiletypes': [
"     'python',
"     'json',
"     'javascript',
"     'css',
"     'markdown',
"     'rust',
"     'sql'
"   ],
"   'prettier.proseWrap': 'always'
" }
"
" When using pyenv, use the `pyenv pyright` to automatically
" create a pyrightconfig.json in the project root to complement
" the coc-settings.json by allowing pyright to find the right venv.
" Note this is different than the 'python.venvPath' entry in coc-settings.json
"
" {
"   'venv': 'odoo',
"   'venvPath': '/home/zach/.pyenv/versions'
" }
"
"
